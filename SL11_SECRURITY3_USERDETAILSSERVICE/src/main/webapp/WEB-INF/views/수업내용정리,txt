1. AM(인증관리자)
       ↑
   PM(제공관리자) ↔ AP(인증제공자) ↔ UDS()
                  인증처리객체    인증정보객체
                                직접구현
                              
2. 직접 UserDatilsService 구현하는 방법

3. 어떤 인증받은 추가적인 정보를 저장.
    MemberVO.java + 추가적인 정보 필드
    AuthVO.java     권한 정보
4. 인증받은 정보를 저장 - DB 관련 코딩 추가,수정
    MemberMapper.java                                  
    MemberMapper.xml
admin	$2a$10$suLQaiZfgKRhOw5vMPDjgOIyGN2bESIiq1Yce5.mTeMTEHSly7XCq	쌍용교육센터강사	1	23/12/05	ROLE_MANAGER
admin	$2a$10$suLQaiZfgKRhOw5vMPDjgOIyGN2bESIiq1Yce5.mTeMTEHSly7XCq	쌍용교육센터강사	1	23/12/05	ROLE_ADMIN
admin	$2a$10$suLQaiZfgKRhOw5vMPDjgOIyGN2bESIiq1Yce5.mTeMTEHSly7XCq	쌍용교육센터강사	1	23/12/05	ROLE_USER    
    
5. security.[Custom]UserDetailsService 직접 구현
   @Override
   UserDetails loadUserByUsername(String username)    
   		 username == member 테이블의id
   		 로그인한 회원 정보 select
   		 MemberVO 객체 생성 > UserDetails 변환
   		 security.domain.CustomerUser
   		 
   UserDetails 클래스 타입 반환
   
6. security-context.xml
    [Custom]UserDatilsService 설정
    
7. 실습
 noticeReg.jsp 글쓰기
 로그인 정보 출력 코딩 추가
 글 쓰기 작성자 - 로그인 사용자 설정
  CustomerController.java
 글 수정,삭제 - 글 작성자 OR 관리 설정
 =================================================================
 웹 소켓 p447
 1. html5 - API : 웹소켓(WebSocket)
 2. 웹소켓
  - http 프로토콜
  - 웹브라우저      <->      웹 서버
               양방향통신   
  - 실시간 알림, 채팅, 웹 기반 실시간 협업             
3. 자바의 웹 소켓 표준(JSR-356)에 맞춰 웹소켓 서버 기능을 구현할 경우 FC, 스프링 빈 객체 사용 X > 클래스 제공
   컨트롤러를 구현한 것과 비슷한 방식으로 서버를 구현할 수 있다.
  - WebSocketHandler 클래스
  - SockJS 연동 : 웹 소켓을 사용할 수 없는 경우
4. 설정.  ~p457             